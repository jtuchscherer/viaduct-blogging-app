# User type representing authenticated users
type User {
  id: ID!
  username: String!
  email: String!
  name: String!
  posts: [Post!]! @resolver
  createdAt: String!
}

# Post type for blog posts
type Post {
  id: ID!
  title: String!
  content: String!
  author: User! @resolver
  comments: [Comment!]! @resolver
  likes: [Like!]! @resolver
  likeCount: Int! @resolver
  isLikedByMe: Boolean! @resolver
  createdAt: String!
  updatedAt: String!
}

# Comment type for post comments
type Comment {
  id: ID!
  content: String!
  author: User! @resolver
  post: Post! @resolver
  createdAt: String!
}

# Like type for post likes
type Like {
  id: ID!
  user: User! @resolver
  post: Post! @resolver
  createdAt: String!
}

# Input types for mutations
input CreatePostInput {
  title: String!
  content: String!
}

input UpdatePostInput {
  id: ID!
  title: String
  content: String
}

input CreateCommentInput {
  postId: ID!
  content: String!
}

# Extend the Query type for read operations
extend type Query {
  # Get all posts (public)
  posts: [Post!]! @resolver

  # Get a single post by ID (public)
  post(id: ID!): Post @resolver

  # Get current user's posts (requires auth)
  myPosts: [Post!]! @resolver

  # Get current authenticated user
  me: User @resolver

  # Get comments for a specific post
  postComments(postId: ID!): [Comment!]! @resolver
}

# Extend mutations for write operations
extend type Mutation {
  # Post operations
  createPost(input: CreatePostInput!): Post! @resolver
  updatePost(input: UpdatePostInput!): Post! @resolver
  deletePost(id: ID!): Boolean! @resolver

  # Comment operations
  createComment(input: CreateCommentInput!): Comment! @resolver
  deleteComment(id: ID!): Boolean! @resolver

  # Like operations
  likePost(postId: ID!): Like! @resolver
  unlikePost(postId: ID!): Boolean! @resolver
}
